在业务控制方法中写入包装User的模型来收集参数
可以在业务控制方法中书写0个或多个模型来收集客户端的参数
1）	如果多个模型中有相同的属性时，可以用user.name或admin.name来收集客户端参数
2）	用一个新的模型将User和Admin再封装一次
User.java
public class User {
	private Integer id;
	private String name;
	private Double sal;
	private Date hiredate;
	public User(){}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Double getSal() {
		return sal;
	}
	public void setSal(Double sal) {
		this.sal = sal;
	}
	public Date getHiredate() {
		return hiredate;
	}
	public void setHiredate(Date hiredate) {
		this.hiredate = hiredate;
	}
	@Override
	public String toString() {
		return this.id + ":" + this.name + ":" + this.sal + ":" + this.hiredate;
	}
}
Bean.java
public class Bean {
	private User user;
	private Admin admin;
	public Bean(){}
	public User getUser() {
		return user;
	}
	public void setUser(User user) {
		this.user = user;
	}
	public Admin getAdmin() {
		return admin;
	}
	public void setAdmin(Admin admin) {
		this.admin = admin;
	}
}
PersonAction.java
@Controller
@RequestMapping(value = "/person")
public class PersonAction {
	@InitBinder
	protected void initBinder(HttpServletRequest request,ServletRequestDataBinder binder) throws Exception {
		binder.registerCustomEditor(
				Date.class,
				new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"),true));
	}
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String add(Bean bean,Model model) throws Exception {
		System.out.println(bean.getUser());
		System.out.println(bean.getAdmin());
		System.out.println("PersonAction::add()::POST");
		model.addAttribute("bean",bean);
		return "/register.jsp";
	}
}
    register.jsp
    普通用户
	<form action="${pageContext.request.contextPath}/person/add.action" method="POST">
		编号：<input type="text" name="user.id" value="${bean.user.id}"/><br/>
		姓名：<input type="text" name="user.name" value="${bean.user.name}"/><br/>
		薪水：<input type="text" name="user.sal" value="${bean.user.sal}"/><br/>
		入职时间：<input type="text" name="user.hiredate" value='<fmt:formatDate value="${bean.user.hiredate}" type="both" />'/><br/>
		<input type="submit" value="注册"/>
	</form>


第二十二章 在业务控制方法中收集数组参数
批量删除用户
@Controller
@RequestMapping(value="/user")
public class UserAction {
	@RequestMapping(value="/delete")
	public String deleteMethod(int[] ids,Model model) throws Exception{
		System.out.println("UserAction::deleteMethod()");
		System.out.println("需要删除的id为：");
		for(int id : ids){
			System.out.print(id+" ");
		}
		model.addAttribute("message","批量删除成功");
		return "/success.jsp";
	}
}


第二十三章 在业务控制方法中收集List<JavaBean>参数
批量注册用户
UserAction.java
@Controller
@RequestMapping(value="/user")
public class UserAction {
	@RequestMapping(value="/addAll")
	public String addAll(Bean bean,Model model) throws Exception{
		for(User user : bean.getUserList()){
			System.out.println(user.getName()+":"+user.getGender());
		}
		model.addAttribute("message","批量增加用户成功");
		return "/success.jsp";
	}
}
    Bean.java
public class Bean {
	private List<User> userList = new ArrayList<User>();
	public Bean(){}
	public List<User> getUserList() {
		return userList;
	}
	public void setUserList(List<User> userList) {
		this.userList = userList;
	}
}
    registerAll.java
	<form action="${pageContext.request.contextPath}/user/addAll.action" method="POST">

		姓名：<input type="text" name="userList[0].name" value="哈哈"/>
		性别：<input type="text" name="userList[0].gender" value="男"/>
		<hr/>

		姓名：<input type="text" name="userList[1].name" value="呵呵"/>
		性别：<input type="text" name="userList[1].gender" value="男"/>
		<hr/>

		姓名：<input type="text" name="userList[2].name" value="嘻嘻"/>
		性别：<input type="text" name="userList[2].gender" value="女"/>
		<hr/>

		<input type="submit" value="批量注册"/>

	</form>


第二十四章 结果的转发和重定向
1）	在转发情况下，共享request域对象，会将参数从第一个业务控制方法传入第二个业务控制方法，
反之，重定向则不行
删除id=10号的用户，再查询用户
@Controller
@RequestMapping(value="/user")
public class UserAction {

	@RequestMapping(value="/delete")
	public String delete(int id) throws Exception{
		System.out.println("删除用户->" + id);
		//转发到find()
		return "forward:/user/find.action";
		//重定向到find()
		//return "redirect:/user/find.action";
	}

	@RequestMapping(value="/find")
	public String find(int id) throws Exception{
		System.out.println("查询用户->" + id);
		return "/success.jsp";
	}

}
